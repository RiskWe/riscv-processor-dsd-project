$date
   Tue Dec 31 15:36:33 2024
$end

$version
  2024.1.1
  $dumpfile ("dump.vcd") 
$end

$timescale
  1ps
$end

$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var wire 32 # InstrD [31:0] $end
$var wire 32 $ RD1_E [31:0] $end
$var wire 32 % RD2_E [31:0] $end
$var wire 1 & BranchE $end
$var integer 32 ' cycle_count [31:0] $end
$scope module dut $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 32 # InstrD [31:0] $end
$var wire 32 $ RD1_E [31:0] $end
$var wire 32 % RD2_E [31:0] $end
$var wire 1 & BranchE $end
$var wire 1 * PCSrcE $end
$var wire 1 + RegWriteW $end
$var wire 1 , RegWriteE $end
$var wire 1 - ALUSrcE $end
$var wire 1 . MemWriteE $end
$var wire 1 / ResultSrcE $end
$var wire 1 0 RegWriteM $end
$var wire 1 1 MemWriteM $end
$var wire 1 2 ResultSrcM $end
$var wire 1 3 ResultSrcW $end
$var wire 3 4 ALUControlE [2:0] $end
$var wire 5 5 RD_E [4:0] $end
$var wire 5 6 RD_M [4:0] $end
$var wire 5 7 RDW [4:0] $end
$var wire 32 8 PCTargetE [31:0] $end
$var wire 32 9 PCD [31:0] $end
$var wire 32 : PCPlus4D [31:0] $end
$var wire 32 ; ResultW [31:0] $end
$var wire 32 < Imm_Ext_E [31:0] $end
$var wire 32 = PCE [31:0] $end
$var wire 32 > PCPlus4E [31:0] $end
$var wire 32 ? PCPlus4M [31:0] $end
$var wire 32 @ WriteDataM [31:0] $end
$var wire 32 A ALU_ResultM [31:0] $end
$var wire 32 B PCPlus4W [31:0] $end
$var wire 32 C ALU_ResultW [31:0] $end
$var wire 32 D ReadDataW [31:0] $end
$var wire 5 E RS1_E [4:0] $end
$var wire 5 F RS2_E [4:0] $end
$var wire 2 G ForwardBE [1:0] $end
$var wire 2 H ForwardAE [1:0] $end
$scope module Fetch $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 1 * PCSrcE $end
$var wire 32 8 PCTargetE [31:0] $end
$var wire 32 # InstrD [31:0] $end
$var wire 32 9 PCD [31:0] $end
$var wire 32 : PCPlus4D [31:0] $end
$var wire 32 I PC_F [31:0] $end
$var wire 32 J PCF [31:0] $end
$var wire 32 K PCPlus4F [31:0] $end
$var wire 32 L InstrF [31:0] $end
$var reg 32 M InstrF_reg [31:0] $end
$var reg 32 N PCF_reg [31:0] $end
$var reg 32 O PCPlus4F_reg [31:0] $end
$scope module PC_MUX $end
$var wire 32 K a [31:0] $end
$var wire 32 8 b [31:0] $end
$var wire 1 * s $end
$var wire 32 I c [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 32 I PC_Next [31:0] $end
$var reg 32 P PC [31:0] $end
$upscope $end
$scope module IMEM $end
$var wire 1 ) rst $end
$var wire 32 J A [31:0] $end
$var wire 32 L RD [31:0] $end
$upscope $end
$scope module PC_adder $end
$var wire 32 J a [31:0] $end
$var wire 32 Q b [31:0] $end
$var wire 32 K c [31:0] $end
$upscope $end
$upscope $end
$scope module Decode $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 1 + RegWriteW $end
$var wire 5 7 RDW [4:0] $end
$var wire 32 # InstrD [31:0] $end
$var wire 32 9 PCD [31:0] $end
$var wire 32 : PCPlus4D [31:0] $end
$var wire 32 ; ResultW [31:0] $end
$var wire 1 , RegWriteE $end
$var wire 1 - ALUSrcE $end
$var wire 1 . MemWriteE $end
$var wire 1 / ResultSrcE $end
$var wire 1 & BranchE $end
$var wire 3 4 ALUControlE [2:0] $end
$var wire 32 $ RD1_E [31:0] $end
$var wire 32 % RD2_E [31:0] $end
$var wire 32 < Imm_Ext_E [31:0] $end
$var wire 5 E RS1_E [4:0] $end
$var wire 5 F RS2_E [4:0] $end
$var wire 5 5 RD_E [4:0] $end
$var wire 32 = PCE [31:0] $end
$var wire 32 > PCPlus4E [31:0] $end
$var wire 1 R RegWriteD $end
$var wire 1 S ALUSrcD $end
$var wire 1 T MemWriteD $end
$var wire 1 U ResultSrcD $end
$var wire 1 V BranchD $end
$var wire 2 W ImmSrcD [1:0] $end
$var wire 3 X ALUControlD [2:0] $end
$var wire 32 Y RD1_D [31:0] $end
$var wire 32 Z RD2_D [31:0] $end
$var wire 32 [ Imm_Ext_D [31:0] $end
$var reg 1 \ RegWriteD_r $end
$var reg 1 ] ALUSrcD_r $end
$var reg 1 ^ MemWriteD_r $end
$var reg 1 _ ResultSrcD_r $end
$var reg 1 ` BranchD_r $end
$var reg 3 a ALUControlD_r [2:0] $end
$var reg 32 b RD1_D_r [31:0] $end
$var reg 32 c RD2_D_r [31:0] $end
$var reg 32 d Imm_Ext_D_r [31:0] $end
$var reg 5 e RD_D_r [4:0] $end
$var reg 5 f RS1_D_r [4:0] $end
$var reg 5 g RS2_D_r [4:0] $end
$var reg 32 h PCD_r [31:0] $end
$var reg 32 i PCPlus4D_r [31:0] $end
$scope module control $end
$var wire 7 j Op [6:0] $end
$var wire 7 k funct7 [31:25] $end
$var wire 3 l funct3 [14:12] $end
$var wire 1 R RegWrite $end
$var wire 1 S ALUSrc $end
$var wire 1 T MemWrite $end
$var wire 1 U ResultSrc $end
$var wire 1 V Branch $end
$var wire 2 W ImmSrc [1:0] $end
$var wire 3 X ALUControl [2:0] $end
$var wire 2 m ALUOp [1:0] $end
$scope module Main_Decoder $end
$var wire 7 j Op [6:0] $end
$var wire 1 R RegWrite $end
$var wire 1 S ALUSrc $end
$var wire 1 T MemWrite $end
$var wire 1 U ResultSrc $end
$var wire 1 V Branch $end
$var wire 2 W ImmSrc [1:0] $end
$var wire 2 m ALUOp [1:0] $end
$upscope $end
$scope module ALU_Decoder $end
$var wire 2 m ALUOp [1:0] $end
$var wire 3 l funct3 [14:12] $end
$var wire 7 k funct7 [31:25] $end
$var wire 7 j op [6:0] $end
$var wire 3 X ALUControl [2:0] $end
$upscope $end
$upscope $end
$scope module rf $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 1 + WE3 $end
$var wire 5 n A1 [19:15] $end
$var wire 5 o A2 [24:20] $end
$var wire 5 7 A3 [4:0] $end
$var wire 32 ; WD3 [31:0] $end
$var wire 32 Y RD1 [31:0] $end
$var wire 32 Z RD2 [31:0] $end
$upscope $end
$scope module extension $end
$var wire 32 # In [31:0] $end
$var wire 2 W ImmSrc [1:0] $end
$var wire 32 [ Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 1 , RegWriteE $end
$var wire 1 - ALUSrcE $end
$var wire 1 . MemWriteE $end
$var wire 1 / ResultSrcE $end
$var wire 1 & BranchE $end
$var wire 3 4 ALUControlE [2:0] $end
$var wire 32 $ RD1_E [31:0] $end
$var wire 32 % RD2_E [31:0] $end
$var wire 32 < Imm_Ext_E [31:0] $end
$var wire 5 5 RD_E [4:0] $end
$var wire 32 = PCE [31:0] $end
$var wire 32 > PCPlus4E [31:0] $end
$var wire 32 ; ResultW [31:0] $end
$var wire 2 H ForwardA_E [1:0] $end
$var wire 2 G ForwardB_E [1:0] $end
$var wire 1 * PCSrcE $end
$var wire 1 0 RegWriteM $end
$var wire 1 1 MemWriteM $end
$var wire 1 2 ResultSrcM $end
$var wire 5 6 RD_M [4:0] $end
$var wire 32 ? PCPlus4M [31:0] $end
$var wire 32 @ WriteDataM [31:0] $end
$var wire 32 A ALU_ResultM [31:0] $end
$var wire 32 8 PCTargetE [31:0] $end
$var wire 32 p Src_A [31:0] $end
$var wire 32 q Src_B_interim [31:0] $end
$var wire 32 r Src_B [31:0] $end
$var wire 32 s ResultE [31:0] $end
$var wire 1 t ZeroE $end
$var reg 1 u RegWriteE_r $end
$var reg 1 v MemWriteE_r $end
$var reg 1 w ResultSrcE_r $end
$var reg 5 x RD_E_r [4:0] $end
$var reg 32 y PCPlus4E_r [31:0] $end
$var reg 32 z RD2_E_r [31:0] $end
$var reg 32 { ResultE_r [31:0] $end
$scope module srca_mux $end
$var wire 32 $ a [31:0] $end
$var wire 32 ; b [31:0] $end
$var wire 32 A c [31:0] $end
$var wire 2 H s [1:0] $end
$var wire 32 p d [31:0] $end
$upscope $end
$scope module srcb_mux $end
$var wire 32 % a [31:0] $end
$var wire 32 ; b [31:0] $end
$var wire 32 A c [31:0] $end
$var wire 2 G s [1:0] $end
$var wire 32 q d [31:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 q a [31:0] $end
$var wire 32 < b [31:0] $end
$var wire 1 - s $end
$var wire 32 r c [31:0] $end
$upscope $end
$scope module alu $end
$var wire 32 p A [31:0] $end
$var wire 32 r B [31:0] $end
$var wire 3 4 ALUControl [2:0] $end
$var wire 1 | Carry $end
$var wire 1 } OverFlow $end
$var wire 1 t Zero $end
$var wire 1 ~ Negative $end
$var wire 32 s Result [31:0] $end
$var wire 1 !! Cout $end
$var wire 32 "! Sum [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 = a [31:0] $end
$var wire 32 < b [31:0] $end
$var wire 32 8 c [31:0] $end
$upscope $end
$upscope $end
$scope module Memory $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 1 0 RegWriteM $end
$var wire 1 1 MemWriteM $end
$var wire 1 2 ResultSrcM $end
$var wire 5 6 RD_M [4:0] $end
$var wire 32 ? PCPlus4M [31:0] $end
$var wire 32 @ WriteDataM [31:0] $end
$var wire 32 A ALU_ResultM [31:0] $end
$var wire 1 + RegWriteW $end
$var wire 1 3 ResultSrcW $end
$var wire 5 7 RD_W [4:0] $end
$var wire 32 B PCPlus4W [31:0] $end
$var wire 32 C ALU_ResultW [31:0] $end
$var wire 32 D ReadDataW [31:0] $end
$var wire 32 #! ReadDataM [31:0] $end
$var reg 1 $! RegWriteM_r $end
$var reg 1 %! ResultSrcM_r $end
$var reg 5 &! RD_M_r [4:0] $end
$var reg 32 '! PCPlus4M_r [31:0] $end
$var reg 32 (! ALU_ResultM_r [31:0] $end
$var reg 32 )! ReadDataM_r [31:0] $end
$scope module dmem $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 1 1 WE $end
$var wire 32 A A [31:0] $end
$var wire 32 @ WD [31:0] $end
$var wire 32 #! RD [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 1 ( clk $end
$var wire 1 ) rst $end
$var wire 1 3 ResultSrcW $end
$var wire 32 B PCPlus4W [31:0] $end
$var wire 32 C ALU_ResultW [31:0] $end
$var wire 32 D ReadDataW [31:0] $end
$var wire 32 ; ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 C a [31:0] $end
$var wire 32 D b [31:0] $end
$var wire 1 3 s $end
$var wire 32 ; c [31:0] $end
$upscope $end
$upscope $end
$scope module Forwarding_block $end
$var wire 1 ) rst $end
$var wire 1 0 RegWriteM $end
$var wire 1 + RegWriteW $end
$var wire 5 6 RD_M [4:0] $end
$var wire 5 7 RD_W [4:0] $end
$var wire 5 E Rs1_E [4:0] $end
$var wire 5 F Rs2_E [4:0] $end
$var wire 2 H ForwardAE [1:0] $end
$var wire 2 G ForwardBE [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
0!!
0"
b0 "!
b0 #
b0 #!
b0 $
0$!
b0 %
0%!
0&
b0 &!
b0 '
b0 '!
0(
b0 (!
0)
b0 )!
0*
0+
0,
0-
0.
0/
00
01
02
03
b0 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 >
b0 ?
b0 @
b0 A
b0 B
b0 C
b0 D
b0 E
b0 F
b0 G
b0 H
bx I
bx J
bx K
b0 L
b0 M
b0 N
b0 O
bx P
b100 Q
0R
0S
0T
0U
0V
b0 W
b0 X
b0 Y
b0 Z
b0 [
0\
0]
0^
0_
0`
b0 a
b0 b
b0 c
b0 d
b0 e
b0 f
b0 g
b0 h
b0 i
b0 j
b0 k
b0 l
b0 m
b0 n
b0 o
b0 p
b0 q
b0 r
b0 s
1t
0u
0v
0w
b0 x
b0 y
b0 z
b0 {
0|
0}
0~
$end

#5000
1!
b1 '
1(
b100 I
b0 J
b100 K
b0 P

#10000
0!
0(

#15000
1!
b10 '
1(

#20000
0!
1"
0(
1)
b10011 L

#25000
1!
b10011 #
b11 '
1(
b100 :
b1000 I
b100 J
b1000 K
b10100000000001010010011 L
b10011 M
b100 O
b100 P
1R
1S
b10011 j
b0 k
b0 l
b0 n
b0 o

#30000
0!
0(

#35000
1!
b10100000000001010010011 #
b100 '
1(
1,
1-
b100 9
b1000 :
b100 >
b1100 I
b1000 J
b1100 K
b1100010011 L
b10100000000001010010011 M
b100 N
b1000 O
b1000 P
bx Z
b101 [
1\
1]
b100 i
b10011 j
b0 k
b0 l
b0 n
b101 o

#40000
0!
0(

#45000
1!
b101 "!
b1100010011 #
bx %
b101 '
1(
10
b101 5
b1001 8
b1000 9
b1100 :
b101 <
b100 =
b1000 >
b100 ?
b101 F
b10000 I
b1100 J
b10000 K
b11000101000001010110011 L
b1100010011 M
b1000 N
b1100 O
b1100 P
b0 Z
b0 [
bx c
b101 d
b101 e
b101 g
b100 h
b1000 i
b10011 j
b0 k
b0 l
b0 n
b0 o
bx q
b101 r
b101 s
0t
1u
b100 y

#50000
0!
0(

#55000
1!
b0 "!
b11000101000001010110011 #
bx #!
1$!
b0 %
b110 '
b100 '!
1(
1+
b110 5
b101 6
b1000 8
b1100 9
b10000 :
b0 <
b1000 =
b1100 >
b1000 ?
bx @
b101 A
b100 B
b0 F
b10100 I
b10000 J
b10100 K
b100110000001100010011 L
b11000101000001010110011 M
b1100 N
b10000 O
b10000 P
0S
bx Y
bx Z
b110 [
b0 c
b0 d
b110 e
b0 g
b1000 h
b1100 i
b110011 j
b0 k
b0 l
b10 m
b101 n
b110 o
b0 q
b0 r
b0 s
1t
b101 x
b1000 y
bx z
b101 {

#60000
0!
0(

#65000
1!
0!!
b101 "!
b100110000001100010011 #
b0 #!
bx $
bx %
b101 &!
b111 '
b1000 '!
1(
b101 (!
bx )!
0-
b101 5
b110 6
b101 7
b10010 8
b10000 9
b10100 :
b101 ;
b110 <
b1100 =
b10000 >
b1100 ?
b0 @
b0 A
b1000 B
b101 C
bx D
b101 E
b110 F
b10 G
b1 H
b11000 I
b10100 J
b11000 K
b11001000000000001110010011 L
b100110000001100010011 M
b10000 N
b10100 O
b10100 P
1S
b1 [
0]
bx b
bx c
b110 d
b101 e
b101 f
b110 g
b1100 h
b10000 i
b10011 j
b0 k
b0 l
b0 m
b110 n
b1 o
b101 p
b0 q
b0 r
b101 s
0t
b110 x
b1100 y
b0 z
b0 {
0|
0}
0~

#70000
0!
0(

#75000
1!
b1 "!
b11001000000000001110010011 #
bx #!
b110 &!
b1000 '
b1100 '!
1(
b0 (!
b0 )!
1-
b110 5
b101 6
b110 7
b10001 8
b10100 9
b11000 :
b0 ;
b1 <
b10000 =
b10100 >
b10000 ?
b101 A
b1100 B
b0 C
b0 D
b110 E
b1 F
b0 G
b11100 I
b11000 J
b11100 K
b11111110011000111100101011100011 L
b11001000000000001110010011 M
b10100 N
b11000 O
b11000 P
b0 Y
b110010 [
1]
b1 d
b110 e
b110 f
b1 g
b10000 h
b10100 i
b10011 j
b1 k
b0 l
b0 n
b10010 o
b0 p
bx q
b1 r
b1 s
b101 x
b10000 y
b101 {

#80000
0!
0(

#85000
1!
b110010 "!
b11111110011000111100101011100011 #
b0 $
b101 &!
b1001 '
b10000 '!
1(
b101 (!
bx )!
b111 5
b110 6
b101 7
b1000110 8
b11000 9
b11100 :
b101 ;
b110010 <
b10100 =
b11000 >
b10100 ?
bx @
b1 A
b10000 B
b101 C
bx D
b0 E
b10010 F
b0 H
b100000 I
b11100 J
b100000 K
b101000000000011110010011 L
b11111110011000111100101011100011 M
b11000 N
b11100 O
b11100 P
0R
0S
1V
b10 W
b1 X
bx Y
b0 Z
b0 [
b0 b
b110010 d
b111 e
b0 f
b10010 g
b10100 h
b11000 i
b1100011 j
b1111111 k
b100 l
b1 m
b111 n
b110 o
b110010 r
b110010 s
b110 x
b10100 y
bx z
b1 {

#90000
0!
0(

#95000
1!
0!!
b110001 "!
b101000000000011110010011 #
bx $
b0 %
1&
b110 &!
b1010 '
b10100 '!
1(
b1 (!
0*
0,
0-
b1 4
b10101 5
b111 6
b110 7
b11000 8
b11100 9
b100000 :
b1 ;
b0 <
b11000 =
b11100 >
b11000 ?
b110010 A
b10100 B
b1 C
b111 E
b110 F
b1 G
b10 H
b100100 I
b100000 J
b100100 K
b1110011 L
b101000000000011110010011 M
b11100 N
b100000 O
b100000 P
1R
1S
0V
b0 W
b0 X
b0 Y
bx Z
b1010 [
0\
0]
1`
b1 a
bx b
b0 c
b0 d
b10101 e
b111 f
b110 g
b11000 h
b11100 i
b10011 j
b0 k
b0 l
b0 m
b0 n
b1010 o
b110010 p
b1 q
b1 r
b110001 s
0t
b111 x
b11000 y
b110010 {
0|
0}
0~

#100000
0!
0(

#105000
1!
b1010 "!
b1110011 #
b0 $
bx %
0&
b111 &!
b1011 '
b11000 '!
1(
b110010 (!
1,
1-
00
b0 4
b1111 5
b10101 6
b111 7
b100110 8
b100000 9
b100100 :
b110010 ;
b1010 <
b11100 =
b100000 >
b11100 ?
b1 @
b110001 A
b11000 B
b110010 C
b0 E
b1010 F
b0 G
b0 H
b101000 I
b100100 J
b101000 K
bx L
b1110011 M
b100000 N
b100100 O
b100100 P
0R
0S
b0 Z
b0 [
1\
1]
0`
b0 a
b0 b
bx c
b1010 d
b1111 e
b0 f
b1010 g
b11100 h
b100000 i
b1110011 j
b0 k
b0 l
b0 n
b0 o
b0 p
bx q
b1010 r
b1010 s
0u
b10101 x
b11100 y
b1 z
b110001 {

#110000
0!
0(

#115000
1!
0!!
b0 "!
bx #
0$!
b0 %
b10101 &!
b1100 '
b11100 '!
1(
b110001 (!
0+
0,
0-
10
b0 5
b1111 6
b10101 7
b100000 8
b100100 9
b101000 :
b110001 ;
b0 <
b100000 =
b100100 >
b100000 ?
bx @
b1010 A
b11100 B
b110001 C
b0 F
b101100 I
b101000 J
b101100 K
bx M
b100100 N
b101000 O
b101000 P
xR
xS
xT
xU
xV
bx W
bx X
bx Y
bx Z
bx [
0\
0]
b0 c
b0 d
b0 e
b0 g
b100000 h
b100100 i
bx j
bx k
bx l
bx m
bx n
bx o
b0 q
b0 r
b0 s
1t
1u
b1111 x
b100000 y
bx z
b1010 {
0|
0}
0~

#120000
0!
0(

#125000
1!
x!!
bx "!
b0 #!
bx $
1$!
bx %
x&
b1111 &!
b1101 '
b100000 '!
1(
b1010 (!
x*
1+
x,
x-
x.
x/
00
bx 4
bx 5
b0 6
b1111 7
bx 8
b101000 9
b101100 :
b1010 ;
bx <
b100100 =
b101000 >
b100100 ?
b0 @
b0 A
b100000 B
b1010 C
bx E
bx F
b0x G
b0x H
bx I
b101100 J
b110000 K
b101000 N
b101100 O
b101100 P
x\
x]
x^
x_
x`
bx a
bx b
bx c
bx d
bx e
bx f
bx g
b100100 h
b101000 i
bx p
bx q
bx r
bx s
xt
0u
b0 x
b100100 y
b0 z
b0 {
x|
x}
x~

#130000
0!
0(

#135000
1!
bx #!
0$!
b0 &!
b1110 '
b100100 '!
1(
b0 (!
b0 )!
0+
x0
x1
x2
bx 6
b0 7
b101100 9
b110000 :
b0 ;
b101000 =
b101100 >
b101000 ?
bx @
bx A
b100100 B
b0 C
b0 D
bx0 G
bx0 H
bx J
bx K
b101100 N
b110000 O
bx P
b101000 h
b101100 i
xu
xv
xw
bx x
b101000 y
bx z
bx {

#140000
0!
0(

#145000
1!
x$!
x%!
bx &!
b1111 '
b101000 '!
1(
bx (!
bx )!
x+
x3
bx 7
bx 9
bx :
bx ;
b101100 =
b110000 >
b101100 ?
b101000 B
bx C
bx D
bx G
bx H
bx N
bx O
b101100 h
b110000 i
b101100 y

#150000
0!
0(

#155000
1!
b10000 '
b101100 '!
1(
bx =
bx >
b110000 ?
b101100 B
bx h
bx i
b110000 y

#160000
0!
0(

#165000
1!
b10001 '
b110000 '!
1(
bx ?
b110000 B
bx y

#170000
0!
0(

#175000
1!
b10010 '
bx '!
1(
bx B

#180000
0!
0(

#185000
1!
b10011 '
1(

#190000
0!
0(

#195000
1!
b10100 '
1(

#200000
0!
0(

#205000
1!
b10101 '
1(

#210000
0!
0(

#215000
1!
b10110 '
1(

#220000
0!
0(

#225000
1!
b10111 '
1(

#230000
0!
0(

#235000
1!
b11000 '
1(

#240000
0!
0(

#245000
1!
b11001 '
1(

#250000
0!
0(

#255000
1!
b11010 '
1(

#260000
0!
0(

#265000
1!
b11011 '
1(

#270000
0!
0(

#275000
1!
b11100 '
1(

#280000
0!
0(

#285000
1!
b11101 '
1(

#290000
0!
0(

#295000
1!
b11110 '
1(

#300000
0!
0(

#305000
1!
b11111 '
1(

#310000
0!
0(

#315000
1!
b100000 '
1(

#320000
0!
0(

#325000
1!
b100001 '
1(

#330000
0!
0(

#335000
1!
b100010 '
1(

#340000
0!
0(

#345000
1!
b100011 '
1(

#350000
0!
0(

#355000
1!
b100100 '
1(

#360000
0!
0(

#365000
1!
b100101 '
1(

#370000
0!
0(

#375000
1!
b100110 '
1(

#380000
0!
0(

#385000
1!
b100111 '
1(

#390000
0!
0(

#395000
1!
b101000 '
1(

#400000
0!
0(

#405000
1!
b101001 '
1(

#410000
0!
0(

#415000
1!
b101010 '
1(

#420000
0!
0(

#425000
1!
b101011 '
1(

#430000
0!
0(

#435000
1!
b101100 '
1(

#440000
0!
0(

#445000
1!
b101101 '
1(

#450000
0!
0(

#455000
1!
b101110 '
1(

#460000
0!
0(

#465000
1!
b101111 '
1(

#470000
0!
0(

#475000
1!
b110000 '
1(

#480000
0!
0(

#485000
1!
b110001 '
1(

#490000
0!
0(

#495000
1!
b110010 '
1(

#500000
0!
0(

#505000
1!
b110011 '
1(

#510000
0!
0(

#515000
1!
b110100 '
1(

#520000
0!
0(

#525000
1!
b110101 '
1(

#530000
0!
0(

#535000
1!
b110110 '
1(

#540000
0!
0(

#545000
1!
b110111 '
1(

#550000
0!
0(

#555000
1!
b111000 '
1(

#560000
0!
0(

#565000
1!
b111001 '
1(

#570000
0!
0(

#575000
1!
b111010 '
1(

#580000
0!
0(

#585000
1!
b111011 '
1(

#590000
0!
0(

#595000
1!
b111100 '
1(

#600000
0!
0(

#605000
1!
b111101 '
1(

#610000
0!
0(

#615000
1!
b111110 '
1(

#620000
0!
0(

#625000
1!
b111111 '
1(

#630000
0!
0(

#635000
1!
b1000000 '
1(

#640000
0!
0(

#645000
1!
b1000001 '
1(

#650000
0!
0(

#655000
1!
b1000010 '
1(

#660000
0!
0(

#665000
1!
b1000011 '
1(

#670000
0!
0(

#675000
1!
b1000100 '
1(

#680000
0!
0(

#685000
1!
b1000101 '
1(

#690000
0!
0(

#695000
1!
b1000110 '
1(

#700000
0!
0(

#705000
1!
b1000111 '
1(

#710000
0!
0(

#715000
1!
b1001000 '
1(

#720000
0!
0(

#725000
1!
b1001001 '
1(

#730000
0!
0(

#735000
1!
b1001010 '
1(

#740000
0!
0(

#745000
1!
b1001011 '
1(

#750000
0!
0(

#755000
1!
b1001100 '
1(

#760000
0!
0(

#765000
1!
b1001101 '
1(

#770000
0!
0(

#775000
1!
b1001110 '
1(

#780000
0!
0(

#785000
1!
b1001111 '
1(

#790000
0!
0(

#795000
1!
b1010000 '
1(

#800000
0!
0(

#805000
1!
b1010001 '
1(

#810000
0!
0(

#815000
1!
b1010010 '
1(

#820000
0!
0(

#825000
1!
b1010011 '
1(

#830000
0!
0(

#835000
1!
b1010100 '
1(

#840000
0!
0(

#845000
1!
b1010101 '
1(

#850000
0!
0(

#855000
1!
b1010110 '
1(

#860000
0!
0(

#865000
1!
b1010111 '
1(

#870000
0!
0(

#875000
1!
b1011000 '
1(

#880000
0!
0(

#885000
1!
b1011001 '
1(

#890000
0!
0(

#895000
1!
b1011010 '
1(

#900000
0!
0(

#905000
1!
b1011011 '
1(

#910000
0!
0(

#915000
1!
b1011100 '
1(

#920000
0!
0(

#925000
1!
b1011101 '
1(

#930000
0!
0(

#935000
1!
b1011110 '
1(

#940000
0!
0(

#945000
1!
b1011111 '
1(

#950000
0!
0(

#955000
1!
b1100000 '
1(

#960000
0!
0(

#965000
1!
b1100001 '
1(

#970000
0!
0(

#975000
1!
b1100010 '
1(

#980000
0!
0(

#985000
1!
b1100011 '
1(

#990000
0!
0(

#995000
1!
b1100100 '
1(

#1000000
0!
0(
